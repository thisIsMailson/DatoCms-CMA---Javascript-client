"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _ora = _interopRequireDefault(require("ora"));

var _appClient = _interopRequireDefault(require("./appClient"));

var _getContentfulData = _interopRequireDefault(require("./getContentfulData"));

var _destroyExistingModels = _interopRequireDefault(require("./destroyExistingModels"));

var _destroyExistingAssets = _interopRequireDefault(require("./destroyExistingAssets"));

var _removeAllValidators = _interopRequireDefault(require("./removeAllValidators"));

var _setLocales = _interopRequireDefault(require("./setLocales"));

var _createModels = _interopRequireDefault(require("./createModels"));

var _createFields = _interopRequireDefault(require("./createFields"));

var _createRecords = _interopRequireDefault(require("./createRecords"));

var _addValidationsOnField = _interopRequireDefault(require("./addValidationsOnField"));

var _linkRecords = _interopRequireDefault(require("./linkRecords"));

var _createUploads = _interopRequireDefault(require("./createUploads"));

var _publishRecords = _interopRequireDefault(require("./publishRecords"));

var _cache = require("./cache");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var contentfulToken, contentfulSpaceId, contentfulEnvironment, datoCmsToken, datoCmsEnvironment, datoCmsCmaBaseUrl, skipContent, contentType, message, client, datoClient, contentfulData, itemTypeMapping, fieldsMapping, recordsMapping, cachedUploads, uploadsMapping, linkedRecords, spinner;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            contentfulToken = _ref.contentfulToken, contentfulSpaceId = _ref.contentfulSpaceId, contentfulEnvironment = _ref.contentfulEnvironment, datoCmsToken = _ref.datoCmsToken, datoCmsEnvironment = _ref.datoCmsEnvironment, datoCmsCmaBaseUrl = _ref.datoCmsCmaBaseUrl, skipContent = _ref.skipContent, contentType = _ref.contentType;
            _context.prev = 1;
            _context.next = 4;
            return (0, _cache.initializeCache)();

          case 4:
            message = "\n*****Important Notice*****\n\nImporting from Contentful is a potentially destructive operation. \nIt will remove all your unused media assets, unused locales, and all models with the same name as Contentful's content types.\nWe strongly recommend to proceed using a clean environment.\n\nDo you wish to continue? [Y/n]: ";
            _context.next = 7;
            return (0, _cache.promptForAction)(message, 'n', function () {
              throw new Error("Import aborted");
            });

          case 7:
            _context.next = 9;
            return (0, _appClient["default"])(contentfulToken, contentfulSpaceId, datoCmsToken, datoCmsEnvironment, datoCmsCmaBaseUrl);

          case 9:
            client = _context.sent;
            datoClient = client.dato;

            if (!(0, _cache.cached)('contentfulData')) {
              _context.next = 15;
              break;
            }

            _context.t0 = (0, _cache.cached)('contentfulData');
            _context.next = 18;
            break;

          case 15:
            _context.next = 17;
            return (0, _getContentfulData["default"])({
              client: client.contentful,
              skipContent: skipContent,
              contentType: contentType,
              contentfulEnvironment: contentfulEnvironment
            });

          case 17:
            _context.t0 = _context.sent;

          case 18:
            contentfulData = _context.t0;
            (0, _cache.writeToFile)({
              contentfulData: contentfulData
            });

            if ((0, _cache.cached)('fieldsMapping')) {
              _context.next = 23;
              break;
            }

            _context.next = 23;
            return (0, _removeAllValidators["default"])({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 23:
            if ((0, _cache.cached)('itemTypeMapping')) {
              _context.next = 26;
              break;
            }

            _context.next = 26;
            return (0, _destroyExistingModels["default"])({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 26:
            if ((0, _cache.cached)('uploadsMapping')) {
              _context.next = 29;
              break;
            }

            _context.next = 29;
            return (0, _destroyExistingAssets["default"])({
              datoClient: datoClient
            });

          case 29:
            _context.next = 31;
            return (0, _setLocales["default"])({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 31:
            if (!(0, _cache.cached)('itemTypeMapping')) {
              _context.next = 35;
              break;
            }

            _context.t1 = (0, _cache.cached)('itemTypeMapping');
            _context.next = 38;
            break;

          case 35:
            _context.next = 37;
            return (0, _createModels["default"])({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 37:
            _context.t1 = _context.sent;

          case 38:
            itemTypeMapping = _context.t1;
            (0, _cache.writeToFile)({
              itemTypeMapping: itemTypeMapping
            }); // fieldsMapping = { <contentTypeId>: Array<{ datoField: Field, contentfulFieldId: string}> }

            if (!(0, _cache.cached)('fieldsMapping')) {
              _context.next = 44;
              break;
            }

            _context.t2 = (0, _cache.cached)('fieldsMapping');
            _context.next = 47;
            break;

          case 44:
            _context.next = 46;
            return (0, _createFields["default"])({
              datoClient: datoClient,
              itemTypeMapping: itemTypeMapping,
              contentfulData: contentfulData
            });

          case 46:
            _context.t2 = _context.sent;

          case 47:
            fieldsMapping = _context.t2;
            (0, _cache.writeToFile)({
              fieldsMapping: fieldsMapping
            });

            if (skipContent) {
              _context.next = 76;
              break;
            }

            if (!(0, _cache.cached)('recordsMapping')) {
              _context.next = 54;
              break;
            }

            _context.t3 = (0, _cache.cached)('recordsMapping');
            _context.next = 57;
            break;

          case 54:
            _context.next = 56;
            return (0, _createRecords["default"])({
              itemTypeMapping: itemTypeMapping,
              fieldsMapping: fieldsMapping,
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 56:
            _context.t3 = _context.sent;

          case 57:
            recordsMapping = _context.t3;
            (0, _cache.writeToFile)({
              recordsMapping: recordsMapping
            });
            cachedUploads = (0, _cache.cached)('uploadsMapping');

            if (!(cachedUploads && Object.keys(cachedUploads).length === contentfulData.assets.length)) {
              _context.next = 64;
              break;
            }

            _context.t4 = cachedUploads;
            _context.next = 67;
            break;

          case 64:
            _context.next = 66;
            return (0, _createUploads["default"])({
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 66:
            _context.t4 = _context.sent;

          case 67:
            uploadsMapping = _context.t4;
            (0, _cache.writeToFile)({
              uploadsMapping: uploadsMapping
            }); // publish all records that should be published...

            _context.next = 71;
            return (0, _publishRecords["default"])({
              recordIds: recordsMapping.recordsToPublish,
              datoClient: datoClient
            });

          case 71:
            _context.next = 73;
            return (0, _linkRecords["default"])({
              datoClient: datoClient,
              fieldsMapping: fieldsMapping,
              contentfulData: contentfulData,
              contentfulRecordMap: recordsMapping.contentfulRecordMap,
              uploadsMapping: uploadsMapping
            });

          case 73:
            linkedRecords = _context.sent;
            _context.next = 76;
            return (0, _publishRecords["default"])({
              recordIds: linkedRecords,
              datoClient: datoClient
            });

          case 76:
            _context.next = 78;
            return (0, _addValidationsOnField["default"])({
              fieldsMapping: fieldsMapping,
              datoClient: datoClient,
              contentfulData: contentfulData
            });

          case 78:
            spinner = (0, _ora["default"])('Import completed! 🎉🎉🎉');
            (0, _cache.destroyTempFile)();
            spinner.succeed();
            _context.next = 86;
            break;

          case 83:
            _context.prev = 83;
            _context.t5 = _context["catch"](1);
            throw new Error("Importer error:  ".concat(JSON.stringify(_context.t5, null, 2)));

          case 86:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 83]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports["default"] = _default;