import { Adapter, Mark, Record, RenderResult, RenderRule, renderRule, StructuredText, TrasformFn, RenderError, Node, Document, NodeWithMeta, MetaEntry, RenderContext, Span } from 'datocms-structured-text-utils';
export { renderRule as renderNodeRule, RenderError };
export declare function markToTagName(mark: Mark): string;
export declare function renderSpanValue<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn>({ node, key, adapter: { renderNode, renderText, renderFragment }, }: RenderContext<H, T, F, Span>): RenderResult<H, T, F>;
declare type RenderMarkContext<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn> = {
    mark: string;
    adapter: Adapter<H, T, F>;
    key: string;
    children: Exclude<RenderResult<H, T, F>, null | undefined>[] | undefined;
};
export declare type RenderMarkRule<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn> = {
    appliable: (mark: string) => boolean;
    apply: (ctx: RenderMarkContext<H, T, F>) => RenderResult<H, T, F>;
};
export declare function renderMarkRule<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn>(guard: string | ((mark: string) => boolean), transform: (ctx: RenderMarkContext<H, T, F>) => RenderResult<H, T, F>): RenderMarkRule<H, T, F>;
export declare function spanNodeRenderRule<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn>({ customMarkRules, }: {
    customMarkRules: RenderMarkRule<H, T, F>[];
}): RenderRule<H, T, F>;
export declare type TransformMetaContext = {
    node: NodeWithMeta;
    meta: Array<MetaEntry>;
};
export declare type TransformedMeta = {
    [prop: string]: unknown;
} | null | undefined;
export declare type TransformMetaFn = (context: TransformMetaContext) => TransformedMeta;
export declare const defaultMetaTransformer: TransformMetaFn;
export declare type RenderOptions<H extends TrasformFn, T extends TrasformFn, F extends TrasformFn> = {
    adapter: Adapter<H, T, F>;
    customNodeRules?: RenderRule<H, T, F>[];
    metaTransformer?: TransformMetaFn;
    customMarkRules?: RenderMarkRule<H, T, F>[];
};
export declare function render<R1 extends Record, H extends TrasformFn, T extends TrasformFn, F extends TrasformFn, R2 extends Record = R1>(structuredTextOrNode: StructuredText<R1, R2> | Document | Node | null | undefined, options: RenderOptions<H, T, F>): RenderResult<H, T, F>;
