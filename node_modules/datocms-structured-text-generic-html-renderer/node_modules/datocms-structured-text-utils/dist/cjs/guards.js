"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isEmptyDocument = exports.isDocument = exports.isStructuredText = exports.isThematicBreak = exports.isInlineItem = exports.isItemLink = exports.isLink = exports.isCode = exports.isBlock = exports.isBlockquote = exports.isListItem = exports.isList = exports.isParagraph = exports.isRoot = exports.isSpan = exports.isHeading = exports.isInlineNode = exports.hasChildren = void 0;
var definitions_1 = require("./definitions");
function hasChildren(node) {
    return 'children' in node;
}
exports.hasChildren = hasChildren;
function isInlineNode(node) {
    return definitions_1.inlineNodeTypes.includes(node.type);
}
exports.isInlineNode = isInlineNode;
function isHeading(node) {
    return node.type === definitions_1.headingNodeType;
}
exports.isHeading = isHeading;
function isSpan(node) {
    return node.type === definitions_1.spanNodeType;
}
exports.isSpan = isSpan;
function isRoot(node) {
    return node.type === definitions_1.rootNodeType;
}
exports.isRoot = isRoot;
function isParagraph(node) {
    return node.type === definitions_1.paragraphNodeType;
}
exports.isParagraph = isParagraph;
function isList(node) {
    return node.type === definitions_1.listNodeType;
}
exports.isList = isList;
function isListItem(node) {
    return node.type === definitions_1.listItemNodeType;
}
exports.isListItem = isListItem;
function isBlockquote(node) {
    return node.type === definitions_1.blockquoteNodeType;
}
exports.isBlockquote = isBlockquote;
function isBlock(node) {
    return node.type === definitions_1.blockNodeType;
}
exports.isBlock = isBlock;
function isCode(node) {
    return node.type === definitions_1.codeNodeType;
}
exports.isCode = isCode;
function isLink(node) {
    return node.type === definitions_1.linkNodeType;
}
exports.isLink = isLink;
function isItemLink(node) {
    return node.type === definitions_1.itemLinkNodeType;
}
exports.isItemLink = isItemLink;
function isInlineItem(node) {
    return node.type === definitions_1.inlineItemNodeType;
}
exports.isInlineItem = isInlineItem;
function isThematicBreak(node) {
    return node.type === definitions_1.thematicBreakNodeType;
}
exports.isThematicBreak = isThematicBreak;
function isStructuredText(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    return obj && 'value' in obj && isDocument(obj.value);
}
exports.isStructuredText = isStructuredText;
function isDocument(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    return obj && 'schema' in obj && 'document' in obj;
}
exports.isDocument = isDocument;
function isEmptyDocument(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    if (!obj) {
        return true;
    }
    var document = isStructuredText(obj)
        ? obj.value
        : isDocument(obj)
            ? obj
            : null;
    if (!document) {
        throw new Error('Passed object is neither null, a Structured Text value or a DAST document');
    }
    return (document.schema === 'dast' &&
        document.document.children.length === 1 &&
        document.document.children[0].type === 'paragraph' &&
        document.document.children[0].children.length === 1 &&
        document.document.children[0].children[0].type === 'span' &&
        document.document.children[0].children[0].value === '');
}
exports.isEmptyDocument = isEmptyDocument;
//# sourceMappingURL=guards.js.map