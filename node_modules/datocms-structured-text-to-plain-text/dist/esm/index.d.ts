import { renderNodeRule, renderMarkRule, TransformedMeta, TransformMetaFn, RenderMarkRule } from 'datocms-structured-text-generic-html-renderer';
import { Adapter, Node, Record as StructuredTextGraphQlResponseRecord, Document as StructuredTextDocument, RenderError, RenderResult, RenderRule, StructuredText as StructuredTextGraphQlResponse } from 'datocms-structured-text-utils';
export { renderNodeRule, renderMarkRule, RenderError };
export { renderNodeRule as renderRule };
export type { StructuredTextDocument, StructuredTextGraphQlResponse, StructuredTextGraphQlResponseRecord, };
export declare const defaultAdapter: {
    renderNode: (tagName: string, attrs: Record<string, string>, ...children: Array<undefined | string | string[]>) => string;
    renderFragment: (children: Array<undefined | string | string[]> | undefined) => string;
    renderText: (text: string) => string;
};
declare type H = typeof defaultAdapter.renderNode;
declare type T = typeof defaultAdapter.renderText;
declare type F = typeof defaultAdapter.renderFragment;
declare type RenderInlineRecordContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
    adapter: Adapter<H, T, F>;
};
declare type RenderRecordLinkContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
    adapter: Adapter<H, T, F>;
    children: RenderResult<H, T, F>;
    transformedMeta: TransformedMeta;
};
declare type RenderBlockContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
    adapter: Adapter<H, T, F>;
};
export declare type RenderSettings<R extends StructuredTextGraphQlResponseRecord> = {
    /** A set of additional rules to convert the document to a string **/
    customNodeRules?: RenderRule<H, T, F>[];
    /** A set of additional rules to convert marks to HTML **/
    customMarkRules?: RenderMarkRule<H, T, F>[];
    /** Function that converts 'link' and 'itemLink' `meta` into HTML attributes */
    metaTransformer?: TransformMetaFn;
    /** Fuction that converts an 'inlineItem' node into a string **/
    renderInlineRecord?: (context: RenderInlineRecordContext<R>) => string | null | undefined;
    /** Fuction that converts an 'itemLink' node into a string **/
    renderLinkToRecord?: (context: RenderRecordLinkContext<R>) => string | null | undefined;
    /** Fuction that converts a 'block' node into a string **/
    renderBlock?: (context: RenderBlockContext<R>) => string | null | undefined;
    /** Fuction that converts a simple string text into a string **/
    renderText?: T;
    /** React.createElement-like function to use to convert a node into a string **/
    renderNode?: H;
    /** Function to use to generate a React.Fragment **/
    renderFragment?: F;
    /** @deprecated use `customNodeRules` instead **/
    customRules?: RenderRule<H, T, F>[];
};
export declare function render<R extends StructuredTextGraphQlResponseRecord>(
/** The actual field value you get from DatoCMS **/
structuredTextOrNode: StructuredTextGraphQlResponse<R> | StructuredTextDocument | Node | null | undefined, 
/** Additional render settings **/
settings?: RenderSettings<R>): ReturnType<F> | null;
