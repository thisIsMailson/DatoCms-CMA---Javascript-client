import { headingNodeType, spanNodeType, rootNodeType, paragraphNodeType, listNodeType, listItemNodeType, blockquoteNodeType, blockNodeType, codeNodeType, linkNodeType, itemLinkNodeType, inlineItemNodeType, inlineNodeTypes, thematicBreakNodeType, } from './definitions';
export function hasChildren(node) {
    return 'children' in node;
}
export function isInlineNode(node) {
    return inlineNodeTypes.includes(node.type);
}
export function isHeading(node) {
    return node.type === headingNodeType;
}
export function isSpan(node) {
    return node.type === spanNodeType;
}
export function isRoot(node) {
    return node.type === rootNodeType;
}
export function isParagraph(node) {
    return node.type === paragraphNodeType;
}
export function isList(node) {
    return node.type === listNodeType;
}
export function isListItem(node) {
    return node.type === listItemNodeType;
}
export function isBlockquote(node) {
    return node.type === blockquoteNodeType;
}
export function isBlock(node) {
    return node.type === blockNodeType;
}
export function isCode(node) {
    return node.type === codeNodeType;
}
export function isLink(node) {
    return node.type === linkNodeType;
}
export function isItemLink(node) {
    return node.type === itemLinkNodeType;
}
export function isInlineItem(node) {
    return node.type === inlineItemNodeType;
}
export function isThematicBreak(node) {
    return node.type === thematicBreakNodeType;
}
export function isStructuredText(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    return obj && 'value' in obj && isDocument(obj.value);
}
export function isDocument(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    return obj && 'schema' in obj && 'document' in obj;
}
export function isEmptyDocument(
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
obj) {
    if (!obj) {
        return true;
    }
    var document = isStructuredText(obj)
        ? obj.value
        : isDocument(obj)
            ? obj
            : null;
    if (!document) {
        throw new Error('Passed object is neither null, a Structured Text value or a DAST document');
    }
    return (document.schema === 'dast' &&
        document.document.children.length === 1 &&
        document.document.children[0].type === 'paragraph' &&
        document.document.children[0].children.length === 1 &&
        document.document.children[0].children[0].type === 'span' &&
        document.document.children[0].children[0].value === '');
}
//# sourceMappingURL=guards.js.map